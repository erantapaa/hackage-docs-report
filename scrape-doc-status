#!/usr/bin/env python

import sqlite3 
import sys
import hackage
import re

SCHEMA1 = """
create table if not exists doc_status (
  package  text,
  version  text,
  upload_time datetime,
  status  text,
  primary key (package, version)
);
"""

SCHEMA2 = """
create table if not exists latest_docs (
  package text,
  version text,
  upload_time datetime,
  status text,
  primary key (package)
)
"""

def info(msg):
  sys.stderr.write("INFO: " + msg + "\n")

def execute_sql(conn, sql, vals):
  try:
    cur = conn.cursor()
    cur.execute(sql, vals)
    conn.commit()
  except sqlite3.Error, e:
    conn.rollback()
    sys.stderr.write("error: " + str(e) + "\n")

def create_schema(conn):
  cur = conn.cursor()
  cur.execute(SCHEMA1)
  cur.execute(SCHEMA2)
  conn.commit()

def status_exists(conn, p):
  cur = conn.cursor()
  cur.execute("SELECT 1 fROM doc_status where package = ?", (p,))
  row = cur.fetchone()
  return row != None

def status_exists_pv(conn, p, v):
  cur = conn.cursor()
  cur.execute("SELECT 1 fROM doc_status where package = ? and version = ?", (p,v))
  row = cur.fetchone()
  return row != None

def insert_latest(conn, p):
  execute_sql(conn, "INSERT INTO latest_docs values (?,?,?,?)", (p.package, p.version, p.upload_time, p.doc_status))

def insert_status(conn, p):
  execute_sql(conn, "INSERT INTO doc_status VALUES (?,?,?,?)", (p.package, p.version, p.upload_time, p.doc_status))

def test1():
  conn = sqlite3.connect("foo.db")
  create_schema(conn)
  d = { "package":"asd", "version":"1.2.3.4", "upload_time": 1234, "status": "the status" }
  insert_status(conn, d)
  insert_status(conn, d)
  insert_status(conn, d)
  print status_exists(conn, "asd", "1.2.3.4")
  print status_exists(conn, "asd", "1.2.3.5")

def process(conn, pkg):
  p = hackage.scrape_doc_status(pkg)
  insert_status(conn, p)
  # find the latest version which has docs
  all_versions = p.all_versions
  i = len(all_versions) - 1
  found = None
  # info("all_versions: {}".format(all_versions))
  while i >= 0:
    if p and not re.search("Docs pending ", p.doc_status):
      found = p
      break
    i = i - 1
    if i < 0: break
    v = all_versions[i]
    # info("trying version {}".format(v))
    p = hackage.scrape_doc_status(pkg, version = v)
  if found:
    insert_latest(conn, found)

def main():
  dbpath = sys.argv[1]
  conn = sqlite3.connect(dbpath)
  create_schema(conn)
  count = 0
  processed = 0
  for pkg in sys.argv[2:]:
    count += 1
    if not status_exists(conn, pkg):
      processed += 1
      process(conn, pkg)
  sys.stderr.write("rows processed: {} / {}\n".format(processed, count))

main()

